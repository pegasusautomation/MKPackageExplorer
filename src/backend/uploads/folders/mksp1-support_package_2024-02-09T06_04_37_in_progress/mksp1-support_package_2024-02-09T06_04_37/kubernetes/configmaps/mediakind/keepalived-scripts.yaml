data:
  check_mongo.sh: '#!/usr/bin/bash

    /usr/bin/mongo  --host 127.0.0.1 --port 27017 --username keepalived --password
    keepalived --quiet --eval ''db.isMaster().ismaster'' | grep -q true

    '
  notify_license_manager.sh: "#!/usr/bin/bash\n\nSTATE=$1\n\nKEEPALIVED=\"/etc/keepalived\"\
    \nAPI_PORT=\"8097\"\nPROC_ID_FILE=\"$KEEPALIVED/PROC_ID_LM\"\nPROC_ID=\"$(cat\
    \ /proc/sys/kernel/random/uuid)\"\nLOCK_FILE=\"$KEEPALIVED/LOCK_LM\"\nLOCK_FD=\n\
    MAX_WAIT_FOR_LOCK_SECONDS=\"60\"\n\nsource /logging.sh\n\nfunction set_proc_id()\
    \ {\n    echo $PROC_ID > \"$PROC_ID_FILE\"\n}\n\nfunction get_proc_id() {\n  \
    \  echo \"$(cat ${PROC_ID_FILE})\"\n}\n\nfunction activate_deactivate() {\n  \
    \  local ACTION=$1\n    local STATE=$2\n\n    local TRY=0\n    local HTTP_CODE=0\n\
    \    local RETURN_CODE=0\n\n    logInfo \"curl -X POST http://127.0.0.1:${API_PORT}/api/license/server/${ACTION}\"\
    \n    # Retry forever or until another process comes in\n    while [ \"$PROC_ID\"\
    \ == \"$(get_proc_id)\" ];\n    do\n        HTTP_CODE=$(curl -X POST -s -o /dev/null\
    \ -w '%{http_code}'  \"http://127.0.0.1:${API_PORT}/api/license/server/${ACTION}\"\
    ;)\n        RETURN_CODE=$?\n        logInfo \"$STATE - ID:$PROC - TRY:$TRY - return\
    \ code: $RETURN_CODE - http code $HTTP_CODE\" >> \"$NOTIFY_PIPE_FILE\"\n     \
    \   # consider failure if return code is not 0, or if http response code is not\
    \ 200 or 409\n        if [[ ( ${RETURN_CODE} -ne 0 ) || ( ${HTTP_CODE} -ne 200\
    \ && ${HTTP_CODE} -ne 409 ) ]]; then\n            # retry in one second\n    \
    \        sleep 1\n            ((TRY++))\n        else\n            # exit the\
    \ loop\n            break\n        fi\n    done\n}\n\nfunction configure_license_manager()\
    \ {\n    local ACTION=$1\n    local STATE=$2\n\n    logInfo \"$STATE ACTION ->\
    \ $ACTION\" >> \"$NOTIFY_PIPE_FILE\"\n\n    if [ \"$ACTION\" == \"OPEN\" ]; then\n\
    \        logInfo \"$STATE activate server : \" >> \"$NOTIFY_PIPE_FILE\"\n    \
    \    activate_deactivate activate  $STATE\n    elif [ \"$ACTION\" == \"CLOSE\"\
    \ ]; then\n        logInfo \"$STATE deactivate server : \" >> \"$NOTIFY_PIPE_FILE\"\
    \n        activate_deactivate deactivate  $STATE\n    fi\n    logInfo \"$STATE\
    \ end!\" >> \"$NOTIFY_PIPE_FILE\"\n}\n\nfunction acquire_lock() {\n    logInfo\
    \ \"$STATE LOCK acquire_lock waiting...\" >> \"$NOTIFY_PIPE_FILE\"\n\n    # NOTE:\
    \ The next line is correctly formed - look up \"using flock in bash without invoking\
    \ a subshell\" for an explanation\n    exec {LOCK_FD}>\"$LOCK_FILE\" || { logError\
    \ \"$STATE LOCK acquire_lock failed to open lock file: ERROR\" >> \"$NOTIFY_PIPE_FILE\"\
    ; exit 1; }\n    flock --exclusive --wait $MAX_WAIT_FOR_LOCK_SECONDS \"$LOCK_FD\"\
    \ || { logError \"$STATE LOCK acquire_lock failed waiting for lock: ERROR\" >>\
    \ \"$NOTIFY_PIPE_FILE\"; exit 1; }\n    logInfo \"$STATE LOCK acquire_lock OK\"\
    \ >> \"$NOTIFY_PIPE_FILE\"\n}\n\nfunction release_lock() {\n    flock --unlock\
    \ \"$LOCK_FD\" || { logError \"$STATE LOCK release_lock failed : ERROR\" >> \"\
    $NOTIFY_PIPE_FILE\"; exit 1; }\n    logInfo \"$STATE LOCK release_lock OK\" >>\
    \ \"$NOTIFY_PIPE_FILE\"\n}\n\n\nlogInfo \"---------------------------------------------------------------\"\
    \ >> \"$NOTIFY_PIPE_FILE\"\nlogInfo \"STATE=$STATE \" >> \"$NOTIFY_PIPE_FILE\"\
    \n\n# A lock is used below to ensure that the license manager configuration is\
    \ carried out\n# as a single transaction. This is to avoid race conditions arising\
    \ from keepalived invoking this\n# script again before an existing invocation\
    \ has concluded.\n#\n# NOTE: The lock is purposely taken after PROC_ID has been\
    \ updated, to allow\n#       a second instance of this script to trigger current\
    \ iteration to complete early.\n#       This does introduce at least a 1 second\
    \ delay to pre-emption by another invocation\n#       of the script, but it's\
    \ better that than the alternative issues caused by race conditions.\n\ncase $STATE\
    \ in\n    \"MASTER\")\n        set_proc_id\n        acquire_lock\n        # Check\
    \ we haven't been pre-empted whilst waiting for lock\n        if [ \"$PROC_ID\"\
    \ == \"$(get_proc_id)\" ]; then\n            rm -f $KEEPALIVED/BACKUP_LM && touch\
    \ $KEEPALIVED/MASTER_LM\n            configure_license_manager OPEN $STATE\n \
    \       else\n            logInfo \"Pre-empted, skipping configuration...\" >>\
    \ \"$NOTIFY_PIPE_FILE\"\n        fi\n        release_lock\n        exit 0\n  \
    \      ;;\n    \"BACKUP\")\n        set_proc_id\n        acquire_lock\n      \
    \  # Check we haven't been pre-empted whilst waiting for lock\n        if [ \"\
    $PROC_ID\" == \"$(get_proc_id)\" ]; then\n            rm -f $KEEPALIVED/MASTER_LM\
    \ && touch $KEEPALIVED/BACKUP_LM\n            configure_license_manager CLOSE\
    \ $STATE\n        else\n            logInfo \"Pre-empted, skipping configuration...\"\
    \ >> \"$NOTIFY_PIPE_FILE\"\n        fi\n        release_lock\n        exit 0\n\
    \        ;;\n    \"FAULT\")\n        logInfo \"$STATE do nothing...\" >> \"$NOTIFY_PIPE_FILE\"\
    \n        exit 0\n        ;;\n    *)\n        logInfo \"unknown state : $STATE.\
    \ Do nothing...\" >> \"$NOTIFY_PIPE_FILE\"\n        exit 1\n        ;;\nesac\n"
metadata:
  annotations:
    meta.helm.sh/release-name: keepalived
    meta.helm.sh/release-namespace: mediakind
  creationTimestamp: '2023-12-14T06:56:50Z'
  labels:
    app.kubernetes.io/component: keepalived
    app.kubernetes.io/instance: keepalived
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keepalived
    app.kubernetes.io/part-of: mkc
    app.kubernetes.io/version: 1.18.0
    helm.sh/chart: keepalived-1.18.0
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:data:
        .: {}
        f:check_mongo.sh: {}
        f:notify_license_manager.sh: {}
      f:metadata:
        f:annotations:
          .: {}
          f:meta.helm.sh/release-name: {}
          f:meta.helm.sh/release-namespace: {}
        f:labels:
          .: {}
          f:app.kubernetes.io/component: {}
          f:app.kubernetes.io/instance: {}
          f:app.kubernetes.io/managed-by: {}
          f:app.kubernetes.io/name: {}
          f:app.kubernetes.io/part-of: {}
          f:app.kubernetes.io/version: {}
          f:helm.sh/chart: {}
    manager: helm
    operation: Update
    time: '2023-12-14T06:56:50Z'
  name: keepalived-scripts
  namespace: mediakind
  resourceVersion: '799'
  uid: 0b1b8f9a-1d2d-42f6-90a6-52ae2e071168
