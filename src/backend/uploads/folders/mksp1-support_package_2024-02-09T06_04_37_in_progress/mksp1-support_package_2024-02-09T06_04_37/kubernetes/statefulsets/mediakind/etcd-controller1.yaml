/etcd:3.5.6-debian-11-r0
        imagePullPolicy: IfNotPresent
        name: etcd-init-operations
        resources: {}
        securityContext:
          runAsUser: 0
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /opt/bitnami/etcd/conf/delete-data-dir-contents.sh
          name: etcd-init-operations
          subPath: delete-data-dir-contents.sh
        - mountPath: /opt/bitnami/etcd/conf/add-member-arbiter.sh
          name: etcd-init-operations
          subPath: add-member-arbiter.sh
        - mountPath: /opt/bitnami/etcd/conf/add-member-controller1-2.sh
          name: etcd-init-operations
          subPath: add-member-controller1-2.sh
        - mountPath: /bitnami/etcd
          name: data
        - mountPath: /var/mediakind/state/etcd/is-initialised
          name: etcd-first-time-run
        - mountPath: /opt/mediakind/etcd/etcd.conf.yaml
          name: etcd-server-config
        - mountPath: /tmp
          name: tmp
      priorityClassName: controller-highest-priority
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 1001
      serviceAccount: default
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
      volumes:
      - name: etcd-jwt-token
        secret:
          defaultMode: 256
          secretName: etcd-controller1-jwt-token
      - configMap:
          defaultMode: 493
          name: etcd-init-operations
        name: etcd-init-operations
      - hostPath:
          path: /var/mediakind/state/etcd/is-initialised
          type: DirectoryOrCreate
        name: etcd-first-time-run
      - hostPath:
          path: /opt/mediakind/etcd/etcd.conf.yaml
          type: File
        name: etcd-server-config
      - emptyDir: {}
        name: tmp
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
      volumeMode: Filesystem
    status:
      phase: Pending
status:
  availableReplicas: 0
  collisionCount: 0
  currentReplicas: 1
  currentRevision: etcd-controller1-7dd8b9bf66
  observedGeneration: 16
  replicas: 1
  updateRevision: etcd-controller1-7dd8b9bf66
  updatedReplicas: 1
metadata:
  annotations:
    meta.helm.sh/release-name: mk-deps
    meta.helm.sh/release-namespace: mediakind
  creationTimestamp: '2023-12-14T06:57:18Z'
  generation: 16
  labels:
    app.kubernetes.io/instance: mk-deps
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: etcd
    helm.sh/chart: etcd-8.5.10
  managedFields:
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:meta.helm.sh/release-name: {}
          f:meta.helm.sh/release-namespace: {}
        f:labels:
          .: {}
          f:app.kubernetes.io/instance: {}
          f:app.kubernetes.io/managed-by: {}
          f:app.kubernetes.io/name: {}
          f:helm.sh/chart: {}
      f:spec:
        f:podManagementPolicy: {}
        f:revisionHistoryLimit: {}
        f:selector: {}
        f:serviceName: {}
        f:template:
          f:metadata:
            f:annotations:
              .: {}
              f:checksum/token-secret: {}
            f:labels:
              .: {}
              f:app.kubernetes.io/instance: {}
              f:app.kubernetes.io/managed-by: {}
              f:app.kubernetes.io/name: {}
              f:helm.sh/chart: {}
          f:spec:
            f:affinity:
              .: {}
              f:podAntiAffinity:
                .: {}
                f:preferredDuringSchedulingIgnoredDuringExecution: {}
            f:containers:
              k:{"name":"etcd"}:
                .: {}
                f:command: {}
                f:env:
                  .: {}
                  k:{"name":"ALLOW_NONE_AUTHENTICATION"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"BITNAMI_DEBUG"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"ETCDCTL_API"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"ETCD_ADVERTISE_CLIENT_URLS"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"ETCD_AUTH_TOKEN"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"ETCD_CLUSTER_DOMAIN"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"ETCD_DATA_DIR"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"ETCD_DISASTER_RECOVERY"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"ETCD_ENABLE_V2"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"ETCD_INITIAL_ADVERTISE_PEER_URLS"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"ETCD_LISTEN_CLIENT_URLS"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"ETCD_LISTEN_PEER_URLS"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"ETCD_LOG_LEVEL"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"ETCD_NAME"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"ETCD_ON_K8S"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"ETCD_START_FROM_SNAPSHOT"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"MY_POD_IP"}:
                    .: {}
                    f:name: {}
                    f:valueFrom:
                      .: {}
                      f:fieldRef: {}
                  k:{"name":"MY_POD_NAME"}:
                    .: {}
                    f:name: {}
                    f:valueFrom:
                      .: {}
                      f:fieldRef: {}
                  k:{"name":"MY_STS_NAME"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                f:image: {}
                f:imagePullPolicy: {}
                f:livenessProbe:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
                  f:failureThreshold: {}
                  f:initialDelaySeconds: {}
                  f:periodSeconds: {}
                  f:successThreshold: {}
                  f:timeoutSeconds: {}
                f:name: {}
                f:ports:
                  .: {}
                  k:{"containerPort":2379,"protocol":"TCP"}:
                    .: {}
                    f:containerPort: {}
                    f:name: {}
                    f:protocol: {}
                  k:{"containerPort":2380,"protocol":"TCP"}:
                    .: {}
                    f:containerPort: {}
                    f:name: {}
                    f:protocol: {}
                f:readinessProbe:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
                  f:failureThreshold: {}
                  f:initialDelaySeconds: {}
                  f:periodSeconds: {}
                  f:successThreshold: {}
                  f:timeoutSeconds: {}
                f:resources: {}
                f:securityContext:
                  .: {}
                  f:allowPrivilegeEscalation: {}
                  f:runAsGroup: {}
                  f:runAsNonRoot: {}
                  f:runAsUser: {}
                f:terminationMessagePath: {}
                f:terminationMessagePolicy: {}
                f:volumeMounts:
                  .: {}
                  k:{"mountPath":"/bitnami/etcd"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/opt/bitnami/etcd/certs/token/"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                    f:readOnly: {}
                  k:{"mountPath":"/opt/mediakind/etcd/etcd.conf.yaml"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
            f:dnsPolicy: {}
            f:initContainers:
              .: {}
              k:{"name":"etcd-init-operations"}:
                .: {}
                f:command: {}
                f:env:
                  .: {}
                  k:{"name":"MY_POD_NAME"}:
                    .: {}
                    f:name: {}
                    f:valueFrom:
                      .: {}
                      f:fieldRef: {}
                f:image: {}
                f:imagePullPolicy: {}
                f:name: {}
                f:resources: {}
                f:securityContext:
                  .: {}
                  f:runAsUser: {}
                f:terminationMessagePath: {}
                f:terminationMessagePolicy: {}
                f:volumeMounts:
                  .: {}
                  k:{"mountPath":"/bitnami/etcd"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/opt/bitnami/etcd/conf/add-member-arbiter.sh"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                    f:subPath: {}
                  k:{"mountPath":"/opt/bitnami/etcd/conf/add-member-controller1-2.sh"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                    f:subPath: {}
                  k:{"mountPath":"/opt/bitnami/etcd/conf/delete-data-dir-contents.sh"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                    f:subPath: {}
                  k:{"mountPath":"/opt/mediakind/etcd/etcd.conf.yaml"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/tmp"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/var/mediakind/state/etcd/is-initialised"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
            f:priorityClassName: {}
            f:restartPolicy: {}
            f:schedulerName: {}
            f:securityContext:
              .: {}
              f:fsGroup: {}
            f:serviceAccount: {}
            f:serviceAccountName: {}
            f:terminationGracePeriodSeconds: {}
            f:volumes:
              .: {}
              k:{"name":"etcd-first-time-run"}:
                .: {}
                f:hostPath:
                  .: {}
                  f:path: {}
                  f:type: {}
                f:name: {}
              k:{"name":"etcd-init-operations"}:
                .: {}
                f:configMap:
                  .: {}
                  f:defaultMode: {}
                  f:name: {}
                f:name: {}
              k:{"name":"etcd-jwt-token"}:
                .: {}
                f:name: {}
                f:secret:
                  .: {}
                  f:defaultMode: {}
                  f:secretName: {}
              k:{"name":"etcd-server-config"}:
                .: {}
                f:hostPath:
                  .: {}
                  f:path: {}
                  f:type: {}
                f:name: {}
              k:{"name":"tmp"}:
                .: {}
                f:emptyDir: {}
                f:name: {}
        f:updateStrategy:
          f:type: {}
        f:volumeClaimTemplates: {}
    manager: helm
    operation: Update
    time: '2023-12-14T06:57:18Z'
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:spec:
        f:template:
          f:spec:
            f:containers:
              k:{"name":"etcd"}:
                f:ports:
                  k:{"containerPort":2379,"protocol":"TCP"}:
                    f:hostPort: {}
                  k:{"containerPort":2380,"protocol":"TCP"}:
                    f:hostPort: {}
    manager: kubectl-patch
    operation: Update
    time: '2023-12-14T06:57:25Z'
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:availableReplicas: {}
        f:collisionCount: {}
        f:currentReplicas: {}
        f:currentRevision: {}
        f:observedGeneration: {}
        f:replicas: {}
        f:updateRevision: {}
        f:updatedReplicas: {}
    manager: k3s
    operation: Update
    subresource: status
    time: '2024-01-04T05:11:40Z'
  name: etcd-controller1
  namespace: mediakind
  resourceVersion: '3284996'
  uid: 82b0a361-d605-41b3-9e6e-efcf9e6b7909
spec:
  podManagementPolicy: Parallel
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: mk-deps
      app.kubernetes.io/name: etcd
  serviceName: etcd-controller1-headless
  template:
    metadata:
      annotations:
        checksum/token-secret: b4d8f473de8e18c96d087ba5dc48fcb677577e2a0ce3ba2f2b6ff8225c324521
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: mk-deps
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: etcd
        helm.sh/chart: etcd-8.5.10
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: mk-deps
                  app.kubernetes.io/name: etcd
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - command:
        - etcd
        - --config-file
        - /opt/mediakind/etcd/etcd.conf.yaml
        env:
        - name: BITNAMI_DEBUG
          value: 'false'
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: MY_STS_NAME
          value: etcd-controller1
        - name: ETCDCTL_API
          value: '3'
        - name: ETCD_ON_K8S
          value: 'yes'
        - name: ETCD_START_FROM_SNAPSHOT
          value: 'no'
        - name: ETCD_DISASTER_RECOVERY
          value: 'no'
        - name: ETCD_NAME
          value: $(MY_POD_NAME)
        - name: ETCD_DATA_DIR
          value: /bitnami/etcd/data
        - name: ETCD_LOG_LEVEL
          value: info
        - name: ALLOW_NONE_AUTHENTICATION
          value: 'yes'
        - name: ETCD_AUTH_TOKEN
          value: jwt,priv-key=/opt/bitnami/etcd/certs/token/jwt-token.pem,sign-method=RS256,ttl=10m
        - name: ETCD_ADVERTISE_CLIENT_URLS
          value: http://$(MY_POD_NAME).etcd-controller1-headless.mediakind.svc.cluster.local:2379,http://etcd-controller1.mediakind.svc.cluster.local:2379
        - name: ETCD_LISTEN_CLIENT_URLS
          value: http://0.0.0.0:2379
        - name: ETCD_INITIAL_ADVERTISE_PEER_URLS
          value: http://$(MY_POD_NAME).etcd-controller1-headless.mediakind.svc.cluster.local:2380
        - name: ETCD_LISTEN_PEER_URLS
          value: http://0.0.0.0:2380
        - name: ETCD_CLUSTER_DOMAIN
          value: etcd-controller1-headless.mediakind.svc.cluster.local
        - name: ETCD_ENABLE_V2
          value: 'True'
        image: packages.mediakind.com/mpd-docker/bitnami/etcd:3.5.6-debian-11-r0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /opt/bitnami/scripts/etcd/healthcheck.sh
          failureThreshold: 5
          initialDelaySeconds: 60
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        name: etcd
        ports:
        - containerPort: 2379
          hostPort: 2379
          name: client
          protocol: TCP
        - containerPort: 2380
          hostPort: 2380
          name: peer
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /opt/bitnami/scripts/etcd/healthcheck.sh
          failureThreshold: 5
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 1001
          runAsNonRoot: true
          runAsUser: 1001
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /bitnami/etcd
          name: data
        - mountPath: /opt/bitnami/etcd/certs/token/
          name: etcd-jwt-token
          readOnly: true
        - mountPath: /opt/mediakind/etcd/etcd.conf.yaml
          name: etcd-server-config
      dnsPolicy: ClusterFirst
      initContainers:
      - command:
        - /bin/bash
        - -c
        - "echo \"initContainer 'etcd-init-operations' started\"\necho \"setting data\
          \ dir owner and group\"\nchown -R 1001:1001 /bitnami/etcd\nif [ $? -ne 0\
          \ ]; then\n  echo \"a problem occured setting data dir owner and group,\
          \ will exit\"\n  exit 1\nfi\n/opt/bitnami/etcd/conf/delete-data-dir-contents.sh\n\
          if [ $? -ne 0 ]; then\n  echo \"a error occured running script 'delete-data-dir-contents.sh',\
          \ will exit\"\n  exit 1\nfi\nif [[ ${MY_POD_NAME} == etcd-arbiter-0 ]];\
          \ then\n  /opt/bitnami/etcd/conf/add-member-arbiter.sh\n  script=\"add-member-arbiter.sh\"\
          \nelse\n  /opt/bitnami/etcd/conf/add-member-controller1-2.sh\n  script=\"\
          add-member-controller1-2.sh\"\nfi\nif [ $? -ne 0 ]; then\n  echo \"a error\
          \ occured running script '${script}', will exit\"\n  exit 1\nfi\necho \"\
          initContainer 'etcd-init-operations' completed (all scripts ran)\"\n"
        env:
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        image: packages.mediakind.com/mpd-docker/bitnami