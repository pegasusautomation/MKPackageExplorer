metadata:
  annotations:
    meta.helm.sh/release-name: mk-deps
    meta.helm.sh/release-namespace: mediakind
  creationTimestamp: '2023-12-14T06:57:18Z'
  generation: 29
  labels:
    app.kubernetes.io/component: mongodb
    app.kubernetes.io/instance: mk-deps
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-10.23.2-replicasetconfigurationsettings2
  managedFields:
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:meta.helm.sh/release-name: {}
          f:meta.helm.sh/release-namespace: {}
        f:labels:
          .: {}
          f:app.kubernetes.io/component: {}
          f:app.kubernetes.io/instance: {}
          f:app.kubernetes.io/managed-by: {}
          f:app.kubernetes.io/name: {}
          f:helm.sh/chart: {}
      f:spec:
        f:podManagementPolicy: {}
        f:revisionHistoryLimit: {}
        f:selector: {}
        f:serviceName: {}
        f:template:
          f:metadata:
            f:labels:
              .: {}
              f:app.kubernetes.io/component: {}
              f:app.kubernetes.io/instance: {}
              f:app.kubernetes.io/managed-by: {}
              f:app.kubernetes.io/name: {}
              f:helm.sh/chart: {}
          f:spec:
            f:affinity:
              .: {}
              f:podAntiAffinity:
                .: {}
                f:preferredDuringSchedulingIgnoredDuringExecution: {}
            f:containers:
              k:{"name":"mongodb"}:
                .: {}
                f:args: {}
                f:env:
                  .: {}
                  k:{"name":"ALLOW_EMPTY_PASSWORD"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"BITNAMI_DEBUG"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"MONGODB_DISABLE_JAVASCRIPT"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"MONGODB_DISABLE_SYSTEM_LOG"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"MONGODB_ENABLE_DIRECTORY_PER_DB"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"MONGODB_ENABLE_IPV6"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"MONGODB_ENABLE_JOURNAL"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"MONGODB_REPLICA_SET_NAME"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"MONGODB_ROOT_PASSWORD"}:
                    .: {}
                    f:name: {}
                    f:valueFrom:
                      .: {}
                      f:secretKeyRef: {}
                  k:{"name":"MONGODB_SYSTEM_LOG_VERBOSITY"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                f:envFrom: {}
                f:image: {}
                f:imagePullPolicy: {}
                f:livenessProbe:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
                  f:failureThreshold: {}
                  f:initialDelaySeconds: {}
                  f:periodSeconds: {}
                  f:successThreshold: {}
                  f:timeoutSeconds: {}
                f:name: {}
                f:ports:
                  .: {}
                  k:{"containerPort":27017,"protocol":"TCP"}:
                    .: {}
                    f:containerPort: {}
                    f:name: {}
                    f:protocol: {}
                f:readinessProbe:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
                  f:failureThreshold: {}
                  f:periodSeconds: {}
                  f:successThreshold: {}
                  f:timeoutSeconds: {}
                f:resources: {}
                f:securityContext:
                  .: {}
                  f:runAsNonRoot: {}
                  f:runAsUser: {}
                f:terminationMessagePath: {}
                f:terminationMessagePolicy: {}
                f:volumeMounts:
                  .: {}
                  k:{"mountPath":"/bitnami/mongodb"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/docker-entrypoint-initdb.d"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
            f:priorityClassName: {}
            f:restartPolicy: {}
            f:schedulerName: {}
            f:securityContext:
              .: {}
              f:fsGroup: {}
            f:serviceAccount: {}
            f:serviceAccountName: {}
            f:terminationGracePeriodSeconds: {}
            f:volumes:
              .: {}
              k:{"name":"custom-init-scripts"}:
                .: {}
                f:configMap:
                  .: {}
                  f:defaultMode: {}
                  f:name: {}
                f:name: {}
        f:updateStrategy:
          f:type: {}
    manager: helm
    operation: Update
    time: '2023-12-14T10:07:16Z'
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:spec:
        f:template:
          f:spec:
            f:containers:
              k:{"name":"mongodb"}:
                f:ports:
                  k:{"containerPort":27017,"protocol":"TCP"}:
                    f:hostPort: {}
                f:volumeMounts:
                  k:{"mountPath":"/opt/mediakind/scripts/custom-init-script.sh"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                    f:subPath: {}
            f:dnsPolicy: {}
            f:hostNetwork: {}
            f:volumes:
              k:{"name":"datadir"}:
                .: {}
                f:hostPath:
                  .: {}
                  f:path: {}
                  f:type: {}
                f:name: {}
              k:{"name":"init-scripts"}:
                .: {}
                f:configMap:
                  .: {}
                  f:defaultMode: {}
                  f:name: {}
                f:name: {}
    manager: kubectl-patch
    operation: Update
    time: '2023-12-14T10:07:21Z'
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:availableReplicas: {}
        f:collisionCount: {}
        f:currentReplicas: {}
        f:currentRevision: {}
        f:observedGeneration: {}
        f:readyReplicas: {}
        f:replicas: {}
        f:updateRevision: {}
        f:updatedReplicas: {}
    manager: k3s
    operation: Update
    subresource: status
    time: '2024-02-06T13:29:09Z'
  name: mongodb-replicaset-controller1
  namespace: mediakind
  resourceVersion: '8615212'
  uid: 7c1e2b68-d41c-40dc-8ca9-93eade537c34
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: mongodb
      app.kubernetes.io/instance: mk-deps
      app.kubernetes.io/name: mongodb
  serviceName: mongodb-replicaset-controller1
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: mongodb
        app.kubernetes.io/instance: mk-deps
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mongodb
        helm.sh/chart: mongodb-10.23.2-replicasetconfigurationsettings2
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/component: mongodb
                  app.kubernetes.io/instance: mk-deps
                  app.kubernetes.io/name: mongodb
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - args:
        - /opt/mediakind/scripts/custom-init-script.sh
        - --wiredTigerCacheSizeGB=0.25
        env:
        - name: BITNAMI_DEBUG
          value: 'false'
        - name: MONGODB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: mongodb-root-password
              name: mongodb-replicaset-controller1
        - name: ALLOW_EMPTY_PASSWORD
          value: 'no'
        - name: MONGODB_SYSTEM_LOG_VERBOSITY
          value: '0'
        - name: MONGODB_DISABLE_SYSTEM_LOG
          value: 'no'
        - name: MONGODB_DISABLE_JAVASCRIPT
          value: 'no'
        - name: MONGODB_ENABLE_JOURNAL
          value: 'yes'
        - name: MONGODB_ENABLE_IPV6
          value: 'no'
        - name: MONGODB_ENABLE_DIRECTORY_PER_DB
          value: 'no'
        - name: MONGODB_REPLICA_SET_NAME
          value: repldb
        envFrom:
        - configMapRef:
            name: mongodb-env-vars
        image: packages.mediakind.com/mpd-docker/bitnami/mongodb:4.4.9-debian-10-r3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - mongo
            - --disableImplicitSessions
            - --eval
            - db.adminCommand('ping')
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: mongodb
        ports:
        - containerPort: 27017
          hostPort: 27017
          name: mongodb
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - bash
            - -ec
            - "# Run the proper check depending on the version\n[[ $(mongo --version\
              \ | grep \"MongoDB shell\") =~ ([0-9]+\\.[0-9]+\\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}\n\
              . /opt/bitnami/scripts/libversion.sh\nVERSION_MAJOR=\"$(get_sematic_version\
              \ \"$VERSION\" 1)\"\nVERSION_MINOR=\"$(get_sematic_version \"$VERSION\"\
              \ 2)\"\nVERSION_PATCH=\"$(get_sematic_version \"$VERSION\" 3)\"\nif\
              \ [[ \"$VERSION_MAJOR\" -ge 4 ]] && [[ \"$VERSION_MINOR\" -ge 4 ]] &&\
              \ [[ \"$VERSION_PATCH\" -ge 2 ]]; then\n  if [[ \"${MONGODB_MK_ARBITER}\"\
              \ == \"true\" ]]; then\n    mongo --disableImplicitSessions $TLS_OPTIONS\
              \ --eval 'db.hello().arbiterOnly' | grep -q 'true'\n  else\n    mongo\
              \ --disableImplicitSessions $TLS_OPTIONS --eval 'db.hello().isWritablePrimary\
              \ || db.hello().secondary' | grep -q 'true'\n  fi\nelse\n  if [[ \"\
              ${MONGODB_MK_ARBITER}\" == \"true\" ]]; then\n    mongo --disableImplicitSessions\
              \ $TLS_OPTIONS --eval 'db.isMaster().arbiterOnly' | grep -q 'true'\n\
              \  else\n    mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.isMaster().ismaster\
              \ || db.isMaster().secondary' | grep -q 'true'\n  fi\nfi\n"
          failureThreshold: 3
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /opt/mediakind/scripts/custom-init-script.sh
          name: init-scripts
          subPath: custom-init-script.sh
        - mountPath: /bitnami/mongodb
          name: datadir
        - mountPath: /docker-entrypoint-initdb.d
          name: custom-init-scripts
      dnsPolicy: ClusterFirstWithHostNet
      hostNetwork: true
      priorityClassName: controller-highest-priority
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 1001
      serviceAccount: mongodb-replicaset-controller1
      serviceAccountName: mongodb-replicaset-controller1
      terminationGracePeriodSeconds: 30
      volumes:
      - hostPath:
          path: /var/lib/mongo
          type: Directory
        name: datadir
      - configMap:
          defaultMode: 511
          name: mongodb-custom-init-scripts
        name: init-scripts
      - configMap:
          defaultMode: 420
          name: mongodb-replicaset-controller1-init-scripts
        name: custom-init-scripts
  updateStrategy:
    type: RollingUpdate
status:
  availableReplicas: 1
  collisionCount: 0
  currentReplicas: 1
  currentRevision: mongodb-replicaset-controller1-5d69797997
  observedGeneration: 29
  readyReplicas: 1
  replicas: 1
  updateRevision: mongodb-replicaset-controller1-5d69797997
  updatedReplicas: 1
